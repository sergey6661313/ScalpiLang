def                    # def - объявляем глобальные данные
  i1 6 + 3,            # по адрессу i1 будет лежать 9, правда мы кодом её тут же перепишем на 8 (см ниже)
  i2 23+6 :64,         # по адрессу i2 будет Число 29 которое займёт 64 бита. (8 байт)
                       # запятая тут на самом деле не нужна, 
                       # но крайне удобна если вы захотите написать эти переменные в одну строку.

8 => i1                # Копирует число 8 в адресс i1
i1' + i2' => return    # Складывает значения из i1 и i2
                       # ' - обозначает взятие значения по адрессу. 
                       # без него компилятор сложил бы адреса.



# общий формат обьявлений:
# <place> <name> <value> :<type_size>,

# где:
#   <name> -  имя которым обозначается адресс в памяти. 
#             (любой набор букв и цифр, но не может начинаться на числа)
#   
#   <place> - это это место где вы будите хранить данные:
#             "def"   - данные считаются частью приложения могут иметь какое либо значение до запуска.
#             "local" - Область памяти которая будет автоматически запрошена и освобождена.
#                       Не может иметь значение до запуска. 
#             "param" - аргументы переданные в функцию.
#
#   <value> - значение. Указать значение можно только для "ram". в остальных случаях не указывается.
#             Для указания можно использовать простую математику. Вызовы функции использовать нельзя.
#
#   <type_size>  - буквально способ интерпретации данных. Это может быть:
#                  • размер данных. Сдесь же можно указать и тип:
#                    "s"  - (signed)   Число иммеет знак.
#                    "f"  - (float)    Число с плавующей точкой.
#                  • "fn" - (function) функция.
#                  • кодировка (для текста):
#                    "ascii"
#                    "asciiz"


def
  one_line_text "one_line_text", 0,  # однострочный текст
  multi_line_text :asciiz,           # многострочный текст. 
    multi
    line
    text

